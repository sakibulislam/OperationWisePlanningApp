package mnj.mfg.model.services;

import java.sql.CallableStatement;

import java.sql.SQLException;

import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import javax.swing.text.Style;

import mnj.mfg.model.lov.views.DepartmentAssignPopUpImpl;
import mnj.mfg.model.lov.views.DetailBlockAutoAssignImpl;
import mnj.mfg.model.lov.views.OrgAssignPopUpVOImpl;
import mnj.mfg.model.lov.views.StnVOImpl;

import mnj.mfg.model.services.common.MainAM;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;


import oracle.jdbc.OracleTypes;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jun 20 14:44:52 BDT 2016
// ---    Custom code may be added to this class.
// ---    Custom Code Added By : Sabih on 21 - June - 2016
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MainAMImpl extends ApplicationModuleImpl implements MainAM {
    /**
     * This is the default constructor (do not remove).
     */
    static String Department;
    static String[] depArray = new String[2];

    static String PrimaryInvOrg;
    static String[] PrimaryInvOrgArray = new String[4];
    public static final int VARCHAR2 = OracleTypes.VARCHAR;

    public MainAMImpl() {
    }

    /**
     * Container's getter for HeaderVO1.
     * @return HeaderVO1
     */
    public ViewObjectImpl getHeaderVO1() {
        return (ViewObjectImpl)findViewObject("HeaderVO1");
    }

    /**
     * Container's getter for StnLineVO1.
     * @return StnLineVO1
     */
    public ViewObjectImpl getStnLineVO1() {
        return (ViewObjectImpl)findViewObject("StnLineVO1");
    }

    /**
     * Container's getter for DepAssignVO1.
     * @return DepAssignVO1
     */
    public ViewObjectImpl getDepAssignVO1() {
        return (ViewObjectImpl)findViewObject("DepAssignVO1");
    }

    /**
     * Container's getter for MnjMfgOspStnLineFkLink1.
     * @return MnjMfgOspStnLineFkLink1
     */
    public ViewLinkImpl getMnjMfgOspStnLineFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjMfgOspStnLineFkLink1");
    }

    /**
     * Container's getter for MnjMfgOspDepAssignFkLink1.
     * @return MnjMfgOspDepAssignFkLink1
     */
    public ViewLinkImpl getMnjMfgOspDepAssignFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjMfgOspDepAssignFkLink1");
    }

    // Code for STN Pop - Up

    public void setSTNWhereClause() {
        
        try {
            String BuyerId = getBuyerId();
            String Style = getStyleName();
            String Season = getSeason();
            String org = getOrgId();

            //        Map sessionScope = ADFContext.getCurrent().getSessionScope();
            //
            //        String org = (String)sessionScope.get("orgId");
            //   String org ="340";
            ViewObject StnVo = getStnVO1();

            StnVo.setWhereClause("BUYER_ID   = " + BuyerId +
                                 " AND STYLE_NAME = '" + Style + "'" +
                                 " AND SEASON     = '" + Season + "'" +
                                 " AND ORG_ID     = '" + org + "'");
            System.out.println("Fill STN Query: " + StnVo.getQuery());
            StnVo.executeQuery();
        } catch (Exception e) {
            
            e.printStackTrace();
        }

       

    }

    public void popSTN() { //TODO

        System.out.println("In AM.......!");

        ViewObject popvo = getStnVO1();
        RowSetIterator it = popvo.createRowSetIterator("aa");
        while (it.hasNext()) {
            Row r = it.next(); //next element returns
            try {

                System.out.println("STN flag -->" + r.getAttribute("Flag"));

                if (r.getAttribute("Flag") != null &&
                    r.getAttribute("Flag").equals("Y"))
                    insertSTN(r); //insert into STNLINE table & stnDeatails table
            } catch (Exception e) {
                ;
            }
        }

        it.closeRowSetIterator();

        ViewObject obj = getDetailBlockAutoAssign1();

        //obj.setWhereClause(null);
        //obj.executeQuery();
        //System.out.println(".......query......."+obj.toString());


        popvo.executeQuery();


    }

    public void selectAllStn(String flag) {


        ViewObject populatevo = getStnVO1();
        //populatevo.executeQuery();

        //Row[] r = populatevo.getAllRowsInRange();
        RowSetIterator it = populatevo.createRowSetIterator("yy");


        while (it.hasNext()) {
            Row row = it.next();

            row.setAttribute("Flag", flag);
            //System.out.println(".........flag");
        }
        it.closeRowSetIterator();

    }

    public void selectAllAssignOrg(String flag) {
        ViewObject vo = getStnLineVO1();
        RowSetIterator it = vo.createRowSetIterator("xx");

        while (it.hasNext()) {
            Row row = it.next();

            row.setAttribute("StnSelectionOrgAssignFlag", flag);
            System.out.println("Show Flag --> " + flag);
        }
        it.closeRowSetIterator();
    }


    public void insertSTN(Row poprow) { //TODO


        ViewObject vo = getStnLineVO1(); //getting all the values of stnlinevo

        Row linerow =
            createLines(); //create, insert new row which is temporary

        linerow.setAttribute("Stn",
                             getPopulateValue(poprow, "Stn")); //getPopulateValue() returns column value

        linerow.setAttribute("Color", getPopulateValue(poprow, "Color"));
        linerow.setAttribute("Wash", getPopulateValue(poprow, "Wash"));

        linerow.setAttribute("Bpo", getPopulateValue(poprow, "BpoNo"));

        linerow.setAttribute("Part", getPopulateValue(poprow, "Part"));

        linerow.setAttribute("StnQty", getPopulateValue(poprow, "OrderedQty"));

        linerow.setAttribute("ProdLine", 1);


        insertDetailBlock(); //TODO insert into detail table

    } //end of populateLines

    // End Code for STN Pop - Up

    public String getBuyerId() {

        ViewObject vo = getHeaderVO1();

        String BuyerId = vo.getCurrentRow().getAttribute("BuyerD").toString();

        return BuyerId;

    }

    public String getStyleName() {

        ViewObject vo = getHeaderVO1();

        String Style = vo.getCurrentRow().getAttribute("Style").toString();

        return Style;

    }

    public String getSeason() {

        ViewObject vo = getHeaderVO1();

        String Season = vo.getCurrentRow().getAttribute("Season").toString();

        return Season;

    }

    public Row createLines() {

        ViewObject vo = getStnLineVO1();
        Row row =
            vo.createRow(); //Creates a new Row object, but does not insert it into the Row Set
        vo.insertRow(row); //Inserts a row to the Row Set, before the current row
        row.setNewRowState(Row.STATUS_INITIALIZED); //Sets a new unposted row, created in this transaction,
        //to either STATUS_NEW or STATUS_INITIALIZED(new row but temporary row)
        //mode
        return row;
    } //end of createHeader

    public String getPopulateValue(Row r, String columnName) {

        String value = null;
        try {
            value = r.getAttribute(columnName).toString();
        } catch (Exception e) {
            ;
        }
        return value;
    }


    // Code For Split Pop - Up

    public void SplitFunctionality(String SplitQuantity) {


        String StlLineId = getStlLineId();

        System.out.println("StlLineId........ " + StlLineId);
        System.out.println("SplitQuantity........ " + SplitQuantity);

        String status = null;
        String stmt = "BEGIN  MNJ_MFG_OSP_PKG.OSP_SPLIT_STN(:1,:2); END;";

        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            //    cs.registerOutParameter(1, OracleTypes.VARCHAR);
            cs.setInt(1, Integer.parseInt(StlLineId));
            cs.setInt(2, Integer.parseInt(SplitQuantity));
            cs.execute();
            //    status = cs.getString(1);
            cs.close();


        } catch (Exception e) {
            status = e.getMessage();
        }

        getRefreshStn();

    }


    // End Code For Split Pop - Up

    public void getRefreshStn() {

        ViewObject vo = getStnLineVO1();

        vo.executeQuery();

    }


    public String getStlLineId() {

        ViewObject vo = getStnLineVO1();

        String StlLineId =
            vo.getCurrentRow().getAttribute("StnLineId").toString();

        return StlLineId;

    }

    /* Method to Populate WHO Column */

    public void setSessionValues(String orgId, String userId, String respId,
                                 String respAppl) {

        System.out.println("UserId....." + userId);
        System.out.println("OrgID..." + orgId);

        if (userId != null) {
            FacesContext fctx = FacesContext.getCurrentInstance();
            ExternalContext ectx = fctx.getExternalContext();
            HttpSession userSession = (HttpSession)ectx.getSession(false);
            userSession.setAttribute("userId", userId);
            //  userSession.setAttribute("userId", userId);
            userSession.setAttribute("orgId", orgId);
            userSession.setAttribute("respId", respId);
        }
    }

    /* End Method to Populate WHO Column */

    /**
     * Container's getter for StnVO1.
     * @return StnVO1
     */
    public StnVOImpl getStnVO1() {
        return (StnVOImpl)findViewObject("StnVO1");
    }

    public void OrgAssignToPrintEmbriodery() {
        System.out.println();
        System.out.println("Entering Auto Organization Assign Against Printing & Embriodery Block");
        ViewObject detailvo = getDetailBlockAutoAssign1();
        RowSetIterator it = detailvo.createRowSetIterator("pp");


        while (it.hasNext()) {

            Row Pop =
                it.next(); //pop contains next row elements of DetailBlockAutoAssign VO


            String DefaultFinalOrg =
                AutoOrgAssignToPrintingEmbriodery((String)Pop.getAttribute("PrimaryInvOrg"),
                                                  (String)Pop.getAttribute("PriDep")); //we will get only CWPL, CAL, 3rd Party & GFL

            String PriDep = (String)Pop.getAttribute("PriDep");
            String PrimaryInvOrganization = (String)Pop.getAttribute("PrimaryInvOrg");
            
            //PrimaryInvOrg = (String)Pop.getAttribute("PrimaryInvOrg");

           
            System.out.println();
            System.out.println("Primary Org: " + PrimaryInvOrganization);
            System.out.println("Pri Dep: " + PriDep);
            System.out.println();
            System.out.println("Default Final Org: " + "----> " + DefaultFinalOrg + " <---");
            
            if (PrimaryInvOrganization.equals("CAL Unit1") || PrimaryInvOrganization.equals("CGL Unit1")) {
                if (PriDep.equals("Printing")) {
                    System.out.println("In Default Unit: CWPL Unit1");
                    //Pop.setAttribute("FinalInvOrg", "CWPL Unit1" );
                    
                    
                    //row.setAttribute("FinalInvOrg", DefaultUnitForPrinting );
                    //System.out.println("DefaultUnitForPrinting: " + "----> " + DefaultUnitForPrinting + " <---" );
                    
                }

                else if (PriDep.equals("Embriodery")) {
                    System.out.println("In Default Unit: CAL Unit1");
                    //Pop.setAttribute("FinalInvOrg", "CAL Unit1" );
                    //System.out.println("DefaultUnitForEmbriodery: " + "----> " + DefaultUnitForEmbriodery + " <---" );
                    
                }
            }

            else if (PrimaryInvOrganization.equals("GDL Unit1") ||
                     PrimaryInvOrganization.equals("GFL Unit1")) {
                if (PriDep.equals("Printing")) {
                    System.out.println("In Default Unit: 3rd Party");
                    //System.out.println("DefaultUnitForPrinting: " + "----> " + DefaultUnitForPrinting + " <---" );
                   
                } else if (PriDep.equals("Embriodery")) {
                    System.out.println("In Default Unit: GFL Unit1");
                    //System.out.println("DefaultUnitForEmbriodery: " + "----> " + DefaultUnitForEmbriodery + " <---" );
                    
                }

            }
            else {
                System.out.println("Default Unit: " + PrimaryInvOrganization);
            }
            
            
//            if (PrimaryInvOrganization.equals("CAL Unit1") &&
//                PriDep.equals("Printing")) {
//
//                Pop.setAttribute("FinalInvOrg", "CWPL Unit1");
//
//            } else if (PrimaryInvOrganization.equals("CAL Unit1") &&
//                       PriDep.equals("Embriodery")) {
//                Pop.setAttribute("FinalInvOrg", "CAL Unit1");
//
//            }
//            else if (PrimaryInvOrganization.equals("CGL Unit1") &&
//                                       PriDep.equals("Embriodery")) {
//                                Pop.setAttribute("FinalInvOrg", "CAL Unit1");
//
//                            }
//            else if (PrimaryInvOrganization.equals("CGL Unit1") &&
//                                   PriDep.equals("Printing")) {
//                            Pop.setAttribute("FinalInvOrg", "CWPL Unit1");
//
//                        }
        


//                        ViewObject vo = getDepAssignVO1();
//                        RowSetIterator iterator = vo.createRowSetIterator("mm");
//            
//                        while (iterator.hasNext()) {
//                            Row row = iterator.next();
//                            
//            
//                                if (PrimaryInvOrganization.equals("CAL Unit1") || PrimaryInvOrganization.equals("CGL Unit1")) {
//                                    if (PriDep.equals("Printing")) {
//                                        System.out.println("Default Unit: CWPL Unit1");
//                                        row.setAttribute("FinalInvOrg", "CWPL Unit1");
//                                        //Pop.setAttribute("FinalInvOrg", "CWPL Unit1" );
//                                        
//                                        
//                                        //row.setAttribute("FinalInvOrg", DefaultUnitForPrinting );
//                                        //System.out.println("DefaultUnitForPrinting: " + "----> " + DefaultUnitForPrinting + " <---" );
//                                        
//                                    }
//
//                                    else if (PriDep.equals("Embriodery")) {
//                                        System.out.println("Default Unit: CAL Unit1");
//                                        row.setAttribute("FinalInvOrg", "CAL Unit1");
//                                        //Pop.setAttribute("FinalInvOrg", "CAL Unit1" );
//                                        //System.out.println("DefaultUnitForEmbriodery: " + "----> " + DefaultUnitForEmbriodery + " <---" );
//                                        
//                                    }
//                                }
//
//                                else if (PrimaryInvOrganization.equals("GDL Unit1") ||
//                                         PrimaryInvOrganization.equals("GFL Unit1")) {
//                                    if (PriDep.equals("Printing")) {
//                                        System.out.println("Default Unit: 3rd Party");
//                                        row.setAttribute("FinalInvOrg", "3rd Party");
//                                        //System.out.println("DefaultUnitForPrinting: " + "----> " + DefaultUnitForPrinting + " <---" );
//                                       
//                                    } else if (PriDep.equals("Embriodery")) {
//                                        System.out.println("Default Unit: GFL Unit1");
//                                        row.setAttribute("FinalInvOrg", "GFL Unit1");
//                                        //System.out.println("DefaultUnitForEmbriodery: " + "----> " + DefaultUnitForEmbriodery + " <---" );
//                                        
//                                    }
//
//                                }
//                                else {
//                                    System.out.println("Default Unit: " + PrimaryInvOrganization);
//                                }
//                        }
//                        iterator.closeRowSetIterator();


            //                String CurrentPrimaryOrg = (String)Pop.getAttribute("PrimaryInvOrg");
            //                System.out.println("Current Primary Org: " + CurrentPrimaryOrg);

            //                linerow.setAttribute("PrimaryMfgOrgId",
            //                                     getPopulateValue(Pop, "PrimaryInvOrgId")); //Set the value for the named attribute
            //
            //
            //
            //                linerow.setAttribute("PrimaryDepartment",
            //                                     getPopulateValue(Pop, "PriDep"));
            //
            //                linerow.setAttribute("FinalMfgOrgId",
            //                                     getPopulateValue(Pop, "FinalInvOrgId"));
            //
            //                linerow.setAttribute("FinalDepartment",
            //                                     getPopulateValue(Pop, "FinDep"));
            //
            //                linerow.setAttribute("PrimaryInvOrg",
            //                                     getPopulateValue(Pop, "PrimaryInvOrg"));
            //
            //                linerow.setAttribute("FinalInvOrg",
            //                                     getPopulateValue(Pop, "FinalInvOrg"));
            //
            //                //linerow.setAttribute("FinalInvOrg","tttttttttttttttttt");
            //
            //                linerow.setAttribute("OperationSequence",
            //                                     getPopulateValue(Pop, "OpSeq"));
        }

        it.closeRowSetIterator();
        
        


    }

    public void insertDetailBlock() { //TODO
        System.out.println("In Insert Detail Block");


        ViewObject vo = getDetailBlockAutoAssign1();
        String one = depArray[0];
        String two = depArray[1];
        System.out.println("Entering Department Assign Condition Block");
        System.out.println("First Dept: " + one);
        System.out.println("Second Dept: " + two);


        String dep = null;
        if ((one != null) && (two != null)) {
            String depr1 = "stdnt";
            System.out.println("Entering When Both Departments Selected Condition");
            vo.setWhereClause("PRI_DEP <>'" + depr1 + "'");
            //vo.setWhereClause(null);
            //String query = vo.getQuery();
            // System.out.println("................query whn not null" + query);
            vo.executeQuery();

        } else if (depArray[0] == null && depArray[1] == null) {
            System.out.println("Entering When Both Departments Null Condition");
            String depr1 = "Printing";
            String depr2 = "Embriodery";
            //System.out.println("Dep1 Dep2 " + depr1 + "," + depr2);
            vo.setWhereClause("PRI_DEP NOT IN ('" + depr1 + "','" + depr2 +
                              "')");
            //String qurey = vo.getQuery();

            //  System.out.println("................query whn not null" + qurey);


            vo.executeQuery();


        } else if (depArray[0].equals("Printing") && depArray[1] == null) {
            String dept = "Embriodery";

            vo.setWhereClause("PRI_DEP <>'" + dept + "'");
            //String query = vo.getQuery();
            // System.out.println("................query when printing " + query);
            vo.executeQuery();

        } else if (depArray[0].equals("Embriodery") && depArray[1] == null) {
            String dept1 = "Printing";
            vo.setWhereClause("PRI_DEP <>'" + dept1 + "'");
            //String query = vo.getQuery();
            //  System.out.println("................query when embriodery " + query);
            vo.executeQuery();

        }

        //OrgAssignToPrintEmbriodery(); //method for selecting Org for printing and embroidery dept

        populateLines(); //method for populating the detail table block


    }

    public void populateLines() {
        //System.out.println("...................test1");


        ViewObject detailvo = getDetailBlockAutoAssign1();
        RowSetIterator it = detailvo.createRowSetIterator("pp");
        //System.out.println("...................test2");

        while (it.hasNext()) {
            //System.out.println("...................test3");
            
            Row linerow =
                createLinesDetailBlock(); //create and insert new but temporary row named LINEROW
            //System.out.println("...................test4");
            Row Pop =
                it.next(); //pop contains next row elements of DetailBlockAutoAssign VO
            
            String  PrimaryOrg= getPopulateValue(Pop, "PrimaryInvOrg") ;
                        
            String  PrimaryDep= getPopulateValue(Pop, "PriDep") ;

            
            linerow.setAttribute("PrimaryMfgOrgId",
                                 getPopulateValue(Pop, "PrimaryInvOrgId")); //Set the value for the named attribute


            linerow.setAttribute("PrimaryDepartment",
                                 getPopulateValue(Pop, "PriDep"));

            linerow.setAttribute("FinalMfgOrgId",
                                 getPopulateValue(Pop, "FinalInvOrgId"));

            linerow.setAttribute("FinalDepartment",
                                 getPopulateValue(Pop, "FinDep"));

            linerow.setAttribute("PrimaryInvOrg",
                                 getPopulateValue(Pop, "PrimaryInvOrg"));
            /* 
             * This if else statement is for auto assigning of final organization for  
             * Printing & Embriodery department 
             * 
             */
                if (PrimaryOrg.equals("CAL Unit1") || PrimaryOrg.equals("CGL Unit1")) {
                    if (PrimaryDep.equals("Printing")) {
                        System.out.println("In Default Unit: CWPL Unit1");
                        
                        linerow.setAttribute("FinalInvOrg", "CWPL Unit1");

                        
                        
                        
                        //row.setAttribute("FinalInvOrg", DefaultUnitForPrinting );
                        //System.out.println("DefaultUnitForPrinting: " + "----> " + DefaultUnitForPrinting + " <---" );
                        
                    }

                    else if (PrimaryDep.equals("Embriodery")) {
                        System.out.println("In Default Unit: CAL Unit1");
                        linerow.setAttribute("FinalInvOrg", "CAL Unit1");
                        
                        //System.out.println("DefaultUnitForEmbriodery: " + "----> " + DefaultUnitForEmbriodery + " <---" );
                        
                    }
                    else {
                        linerow.setAttribute("FinalInvOrg",
                                     getPopulateValue(Pop, "FinalInvOrg"));
                    }
                }

                 if (PrimaryOrg.equals("GDL Unit1") || PrimaryOrg.equals("GFL Unit1")) {
                    if (PrimaryDep.equals("Printing")) {
                        System.out.println("In Default Unit: 3rd Party Vendor");
                        linerow.setAttribute("FinalInvOrg", "3rd Party Vendor");
                        //System.out.println("DefaultUnitForPrinting: " + "----> " + DefaultUnitForPrinting + " <---" );
                       
                    } else if (PrimaryDep.equals("Embriodery")) {
                        System.out.println("In Default Unit: GFL Unit1");
                        linerow.setAttribute("FinalInvOrg", "GFL Unit1");
                        //System.out.println("DefaultUnitForEmbriodery: " + "----> " + DefaultUnitForEmbriodery + " <---" );
                        
                    }
                    else {
                        linerow.setAttribute("FinalInvOrg",
                                     getPopulateValue(Pop, "FinalInvOrg"));
                    }

                }
               
                
            //linerow.setAttribute("FinalInvOrg", getPopulateValue(Pop, "FinalInvOrg"));
                    

            

            linerow.setAttribute("OperationSequence",
                                 getPopulateValue(Pop, "OpSeq"));
        }
        it.closeRowSetIterator();
        //vo.executeQuery();
    } //end of populateLines

    public Row createLinesDetailBlock() { //TODO
        System.out.println("In Create Detail Block");
        ViewObject vo = getDepAssignVO1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED); // status initialized == temporary
        return row;
    } //end of createHeader

    /**
     * Container's getter for DetailBlockAutoAssign1.
     * @return DetailBlockAutoAssign1
     */
    public DetailBlockAutoAssignImpl getDetailBlockAutoAssign1() {
        return (DetailBlockAutoAssignImpl)findViewObject("DetailBlockAutoAssign1");
    }

    /// Procedures For OSP By : Sabihuddin Khan Dated : 20-Sep-2016

    public String ItemCreation() {


        String StlLineId = getHeaderId();

        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String user = (String)sessionScope.get("userId");
        String orgId = (String)sessionScope.get("orgId");
        String respId = (String)sessionScope.get("respId");
        String respAppl = (String)sessionScope.get("respAppl");

        System.out.println("StlLineId........ " + StlLineId);

        String status = null;
        String stmt =
            "BEGIN  MNJ_MFG_OSP_PKG.OSP_ITEM_CREATION(:1,:2 ,:3, :4, :5, :6, :7); END;";

        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);

        try {

            cs.setString(1, orgId); //org ID
            cs.setString(2, respId); //responsibility ID
            cs.setString(3, user); //user ID
            cs.setString(4, respAppl); //application ID
            cs.setInt(5, 0); //item ID
            cs.registerOutParameter(6,
                                    oracle.jdbc.OracleTypes.VARCHAR); //status
            cs.setInt(7, Integer.parseInt(StlLineId)); //Header ID

            cs.execute();
            status = cs.getString(6);
            cs.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return status;

    }

    public String BpoCreation() {


        String StlLineId = getStlLineId();

        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String user = (String)sessionScope.get("userId");
        String orgId = (String)sessionScope.get("orgId");
        String respId = (String)sessionScope.get("respId");
        String respAppl = (String)sessionScope.get("respAppl");

        System.out.println("StlLineId........ " + StlLineId);

        String status = null;
        String stmt = "BEGIN  MNJ_MFG_OSP_PKG.OSP_BPO_CREATION(:1,:2); END;";

        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(2, OracleTypes.VARCHAR);
            cs.setInt(1, Integer.parseInt(StlLineId));
            cs.execute();
            status = cs.getString(2);
            cs.close();


        } catch (Exception e) {
            status = e.getMessage();
        }

        getRefreshStn();
        System.out.println(status);
        return status;

    }

    public String JobCreation() {


        String headerId; // = getStlLineId();
        headerId = getHeaderId();

        // to get selected row's color for job creation


        ViewObject stnLine = this.getStnLineVO1();

        String color;

        String wash;
        try {
            color = stnLine.getCurrentRow().getAttribute("Color").toString();
            wash = stnLine.getCurrentRow().getAttribute("Wash").toString();
        } catch (Exception e) {

            FacesMessage Message =
                new FacesMessage(" Color and Wash cann't be empty");
            Message.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, Message);
            return null;
        }


        String status = null;
        String stmt =
            "BEGIN  MNJ_MFG_OSP_PKG.OSP_JOB_CREATION(:1,:2,:3,:4); END;";

        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(4, OracleTypes.VARCHAR);
            cs.setInt(1, Integer.parseInt(headerId));
            cs.setString(2, color);
            cs.setString(3, wash);
            cs.execute();
            status = cs.getString(4);
            cs.close();


        } catch (Exception e) {
            status = e.getMessage();
        }

        getRefreshStn();

        return status;

    }

    public String MiscReceiptCreation() {


        String StlLineId = getHeaderId();

        System.out.println("StlLineId........ " + StlLineId);

        String status = null;
        String stmt = "BEGIN  MNJ_MFG_OSP_PKG.OSP_MISC_RECEIPT(:1,:2); END;";

        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(2, OracleTypes.VARCHAR);
            cs.setInt(1, Integer.parseInt(StlLineId));
            cs.execute();
            status = cs.getString(2);
            cs.close();


        } catch (Exception e) {
            status = e.getMessage();
        }

        getRefreshStn();

        return status;

    }

    public String AssignOperation() {


        String StlLineId = getStlLineId();

        System.out.println("StlLineId........ " + StlLineId);

        String status = null;
        String stmt =
            "BEGIN  MNJ_MFG_OSP_PKG.OSP_ASSIGN_OPERATION(:1,:2); END;";

        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(2, OracleTypes.VARCHAR);
            cs.setInt(1, Integer.parseInt(StlLineId));
            cs.execute();
            status = cs.getString(2);
            cs.close();


        } catch (Exception e) {
            status = e.getMessage();
        }

        getRefreshStn();

        return status;

    }

    public String AddMaterial() {


        String StlLineId = getStlLineId();

        System.out.println("StlLineId........ " + StlLineId);

        String status = null;
        String stmt = "BEGIN  MNJ_MFG_OSP_PKG.OSP_ADD_MATERIAL(:1,:2); END;";

        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(2, OracleTypes.VARCHAR);
            cs.setInt(1, Integer.parseInt(StlLineId));
            cs.execute();
            status = cs.getString(2);
            cs.close();


        } catch (Exception e) {
            status = e.getMessage();
        }

        getRefreshStn();

        return status;

    }
    /// End

    /**
     * Container's getter for OrgAssignPopUpVO1.
     * @return OrgAssignPopUpVO1
     */
    public OrgAssignPopUpVOImpl getOrgAssignPopUpVO1() {
        return (OrgAssignPopUpVOImpl)findViewObject("OrgAssignPopUpVO1");
    }

    public void OrgAssignToStns() {

        //// Roll header part

        ViewObject populatevo = getOrgAssignPopUpVO1();
        String OrgId = "null";
        String flag;
        if (populatevo.getRowCount() == 0)
            ;
        RowSetIterator it = populatevo.createRowSetIterator("aaa");
        Row r[] = populatevo.getAllRowsInRange();
        for (Row row : r) {
            System.out.println("Org Selection loop count");
            try {
                flag = row.getAttribute("OrgSelectionFlag").toString();
                System.out.println("Flag Code -->" + flag);
                if (flag.equals("Y"))

                    OrgId = row.getAttribute("InvOrg").toString();
                System.out.println("Show Org Id: " + OrgId);

            } catch (Exception e) {
                ;
            }


        }
        it.closeRowSetIterator();

        //// Roll Detail part End

        //// Roll header part

        ViewObject FabShrinkL = getStnLineVO1();
        String StnLineId = "null";
        String flagFabShrinkL;
        int Result;
        if (FabShrinkL.getRowCount() == 0)
            ;
        RowSetIterator itFabShrinkL = FabShrinkL.createRowSetIterator("bbb");
        Row rFabShrinkL[] = FabShrinkL.getAllRowsInRange();
        for (Row rowFabShrinkL : rFabShrinkL) {
            System.out.println("STN Line loop count");
            try {
                flagFabShrinkL =
                        rowFabShrinkL.getAttribute("StnSelectionOrgAssignFlag").toString();
                System.out.println("Flag Code -->" +
                                   rowFabShrinkL.getAttribute("StnSelectionOrgAssignFlag"));
                if (flagFabShrinkL.equals("Y"))

                    StnLineId =
                            rowFabShrinkL.getAttribute("StnLineId").toString();

                String stmt =
                    "BEGIN :1 :=  MNJ_MFG_OSP_PKG.ORG_ASSIGN_TO_STN(:2,:3,:4); end;";
                java.sql.CallableStatement cs =
                    getDBTransaction().createCallableStatement(stmt, 1);
                int a = 0;
                try {
                    cs.setString(2, OrgId);
                    cs.setString(3, StnLineId);
                    cs.setString(4, "ORG_NORM");
                    cs.registerOutParameter(1, OracleTypes.INTEGER);
                    cs.execute();
                    Result = cs.getInt(1);
                    cs.close();
                } catch (Exception e) {
                    //status = e.getMessage();
                    ;
                }


            } catch (Exception e) {
                ;
            }


        }
        itFabShrinkL.closeRowSetIterator();
        FabShrinkL.executeQuery();
        //// Roll Detail part End

    }

    public void OrgAssignToPrinting() {
        //// Roll header part

        ViewObject vo = getOrgAssignToPrintingPopUpVO1();
        String OrgId = "null";
        String flag;

        if (vo.getRowCount() == 0)
            ;
        RowSetIterator it = vo.createRowSetIterator("aaa");
        Row r[] = vo.getAllRowsInRange();

        for (Row row : r) {
            System.out.println("Org Assign To Printing Loop Count ");
            try {

                try {


                    flag = row.getAttribute("SelectOrg").toString();
                    System.out.println("Flag ==> " + flag);
                } catch (Exception e) {


                    flag = "N";
                    System.out.println("Flag ==> " + flag);
                }


                System.out.println("Org Assign Print Flag Code -->" +
                                   row.getAttribute("SelectOrg"));
                if (flag.equals("Y")) {
                    OrgId = row.getAttribute("InvOrg").toString();
                    System.out.println("Selected Org Id: " + OrgId);
                }


            } catch (Exception e) {
                e.printStackTrace();
                //  System.out.println();
                ;
            }


        }
        it.closeRowSetIterator();

        //// Roll Detail part End

        //// Roll header part

        ViewObject FabShrinkL = getStnLineVO1();
        String StnLineId = "null";
        String flagFabShrinkL;
        int Result;
        if (FabShrinkL.getRowCount() == 0)
            ;
        RowSetIterator itFabShrinkL = FabShrinkL.createRowSetIterator("bbb");
        Row rFabShrinkL[] = FabShrinkL.getAllRowsInRange();
        for (Row rowFabShrinkL : rFabShrinkL) {
            System.out.println("STN Line Loop Count");
            try {
                flagFabShrinkL =
                        rowFabShrinkL.getAttribute("StnSelectionOrgAssignFlag").toString();
                System.out.println("Flag Code -->" + flagFabShrinkL);
                if (flagFabShrinkL.equals("Y"))

                    StnLineId =
                            rowFabShrinkL.getAttribute("StnLineId").toString();

                String stmt =
                    "BEGIN :1 :=  MNJ_MFG_OSP_PKG.ORG_ASSIGN_TO_STN(:2,:3,:4); end;";
                java.sql.CallableStatement cs =
                    getDBTransaction().createCallableStatement(stmt, 1);
                int a = 0;
                try {
                    cs.setString(2, OrgId);
                    cs.setString(3, StnLineId);
                    cs.setString(4, "ORG_PRINT");
                    cs.registerOutParameter(1, OracleTypes.INTEGER);
                    cs.execute();
                    Result = cs.getInt(1);
                    cs.close();
                } catch (Exception e) {
                    //status = e.getMessage();
                    ;
                }


            } catch (Exception e) {
                ;
            }


        }
        itFabShrinkL.closeRowSetIterator();
        FabShrinkL.executeQuery();
        //// Roll Detail part End
    }

    public void OrgAssignToEmbriodery() {
        ViewObject vo = getOrgAssignToPrintingPopUpVO1();
        String OrgId = "null";
        String flag;

        if (vo.getRowCount() == 0)
            ;
        RowSetIterator it = vo.createRowSetIterator("aaa");
        Row r[] = vo.getAllRowsInRange();

        for (Row row : r) {
            System.out.println("Org Assign To Embriodery Loop Count ");
            try {

                try {


                    flag = row.getAttribute("ChooseBox").toString();
                    System.out.println("Flag ==> " + flag);
                } catch (Exception e) {


                    flag = "N";
                    System.out.println("Flag ==> " + flag);
                }


                System.out.println("Org Assign Embriodery Flag Code -->" +
                                   row.getAttribute("ChooseBox"));
                if (flag.equals("Y")) {
                    OrgId = row.getAttribute("InvOrg").toString();
                    System.out.println("Selected Org Id: " + OrgId);
                }


            } catch (Exception e) {
                e.printStackTrace();
                //  System.out.println();
                ;
            }


        }
        it.closeRowSetIterator();

        //// Roll Detail part End

        //// Roll header part

        ViewObject FabShrinkL = getStnLineVO1();
        String StnLineId = "null";
        String flagFabShrinkL;
        int Result;
        if (FabShrinkL.getRowCount() == 0)
            ;
        RowSetIterator itFabShrinkL = FabShrinkL.createRowSetIterator("bbb");
        Row rFabShrinkL[] = FabShrinkL.getAllRowsInRange();
        for (Row rowFabShrinkL : rFabShrinkL) {
            System.out.println("STN Line Loop Count");
            try {
                flagFabShrinkL =
                        rowFabShrinkL.getAttribute("StnSelectionOrgAssignFlag").toString();
                System.out.println("Flag Code -->" + flagFabShrinkL);
                if (flagFabShrinkL.equals("Y"))

                    StnLineId =
                            rowFabShrinkL.getAttribute("StnLineId").toString();

                String stmt =
                    "BEGIN :1 :=  MNJ_MFG_OSP_PKG.ORG_ASSIGN_TO_STN(:2,:3,:4); end;";
                java.sql.CallableStatement cs =
                    getDBTransaction().createCallableStatement(stmt, 1);
                int a = 0;
                try {
                    cs.setString(2, OrgId);
                    cs.setString(3, StnLineId);
                    cs.setString(4, "ORG_EMBR");
                    cs.registerOutParameter(1, OracleTypes.INTEGER);
                    cs.execute();
                    Result = cs.getInt(1);
                    cs.close();
                } catch (Exception e) {
                    //status = e.getMessage();
                    ;
                }


            } catch (Exception e) {
                ;
            }


        }
        itFabShrinkL.closeRowSetIterator();
        FabShrinkL.executeQuery();

    }

    public void DeptAssignToStns() { //TODO

        //// Roll header part
        System.out.println("In Department Assign Block");

        ViewObject populatevo = getDepartmentAssignPopUp1();
        Department = "null";
        String departM = null;
        //String flag;
        depArray[0] = null;
        depArray[1] = null;

        if (populatevo.getRowCount() == 0)
            ;
        RowSetIterator it = populatevo.createRowSetIterator("aaa");
        Row r[] = populatevo.getAllRowsInRange();
        //....array
        int i = 0;
        for (Row row : r) {

            try {
                //flag = row.getAttribute("SelectBox").toString();
                System.out.println("Department Flag -->" +
                                   row.getAttribute("SelectBox"));
                if (row.getAttribute("SelectBox") != null &&
                    row.getAttribute("SelectBox").equals("Y")) {
                    //if    (flag.equals("Y"))
                    departM = row.getAttribute("Department").toString();
                    //System.out.println("Department Name: " + Department);
                    depArray[i] = departM;
                    i++;
                }
            } catch (Exception e) {
                ;
            }


        }
        it.closeRowSetIterator();

        for (int a = 0; a < 2; a++) {
            System.out.println(".........array check " + depArray[a]);
        }

    }

    protected Object callStoredFunction(int sqlReturnType, String stmt,
                                        Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st =
 getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    ;
                }
            }
        }

    }

    public String AssignSubInventories() {

        String StlLineId = getHeaderId();

        System.out.println("StlLineId........ " + StlLineId);

        String status = null;
        status =
                (String)callStoredFunction(VARCHAR2, "MNJ_MFG_OSP_PKG.ASSIGN_SUBINVENTORY(?)",
                                           new Object[] { StlLineId });


        getRefreshStn();

        return status;

    }


    private String getHeaderId() {
        ViewObject vo = getStnLineVO1();

        String headerId =
            vo.getCurrentRow().getAttribute("HeaderId").toString();

        return headerId;
    }

    private String getOrgId() {
        ViewObject vo = getHeaderVO1();

        String OrgId = vo.getCurrentRow().getAttribute("OrgId").toString();

        return OrgId;


    }

    /**
     * Container's getter for DepartmentAssignPopUp1.
     * @return DepartmentAssignPopUp1
     */
    public ViewObjectImpl getDepartmentAssignPopUp1() {
        return (ViewObjectImpl)findViewObject("DepartmentAssignPopUp1");
    }

    /**
     * Container's getter for OrgAssignToPrintingPopUpVO1.
     * @return OrgAssignToPrintingPopUpVO1
     */
    public ViewObjectImpl getOrgAssignToPrintingPopUpVO1() {
        return (ViewObjectImpl)findViewObject("OrgAssignToPrintingPopUpVO1");
    }

    public String AutoOrgAssignToPrintingEmbriodery(String PrimaryOrg,
                                                    String PrimaryDept) {
        

           
        
        if (PrimaryOrg.equals("CAL Unit1") || PrimaryOrg.equals("CGL Unit1")) {
            if (PrimaryDept.equals("Printing")) {
                String DefaultUnitForPrinting = "CWPL Unit1";
                //row.setAttribute("FinalInvOrg", DefaultUnitForPrinting );
                //System.out.println("DefaultUnitForPrinting: " + "----> " + DefaultUnitForPrinting + " <---" );
                return DefaultUnitForPrinting;
            }

            else if (PrimaryDept.equals("Embriodery")) {
                String DefaultUnitForEmbriodery = "CAL Unit1";
                //System.out.println("DefaultUnitForEmbriodery: " + "----> " + DefaultUnitForEmbriodery + " <---" );
                return DefaultUnitForEmbriodery;
            }
        }

        else if (PrimaryOrg.equals("GDL Unit1") ||
                 PrimaryOrg.equals("GFL Unit1")) {
            if (PrimaryDept.equals("Printing")) {
                String DefaultUnitForPrinting = "Setup Business Group";
                //System.out.println("DefaultUnitForPrinting: " + "----> " + DefaultUnitForPrinting + " <---" );
                return DefaultUnitForPrinting;
            } else if (PrimaryDept.equals("Embriodery")) {
                String DefaultUnitForEmbriodery = "GFL Unit1";
                //System.out.println("DefaultUnitForEmbriodery: " + "----> " + DefaultUnitForEmbriodery + " <---" );
                return DefaultUnitForEmbriodery;
            }

        }
        

        return PrimaryOrg;
    }

    /**
     * Container's getter for OrgDetailsVO1.
     * @return OrgDetailsVO1
     */
    public ViewObjectImpl getOrgDetailsVO1() {
        return (ViewObjectImpl)findViewObject("OrgDetailsVO1");
    }
}

